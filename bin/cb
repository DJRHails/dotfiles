#!/usr/bin/env bash

# credit: https://gist.github.com/RichardBronosky/56d8f614fab2bacdd8b048fb58d0c0c7
# credit: https://github.com/javier-lopez/learn/master/sh/tools/cb

##? Unifies the copy and paste commands into one
##? intelligent chainable command.
##?
##? USAGE:
##?     cb [FLAG/OPTIONS] <clipboard>...
##?
##? FLAGS:
##?     -a, --append
##?         append to the given clipboard, do not overwrite.
##?     -t, --target
##?         use given target instead of the default ones
##?     -v, --version
##?         display version
##?     -e, --expose
##?         expose the cliboard on port 2224/2225 for remote access (copy/paste), use with caution on internet accessible machines
##?         setup SSH `RemoteForward 2224 localhost:2224` and `RemoteForward 2225 localhost:2225`
##?     -h, --help
##?         show this help
##?
##? ARGS:
##?     <clipboard>  the file to extract
##?
##? EXAMPLES:
##?     `date | cb`       copy current data to clipboard
##?     `cb`              paste current clipboard to stdout
##?     `cb | tee d.log`  paste current clipboard to d.log and stdout.
##?     `cb -a`           append current clipboard to the clipboard
##?     `cb -t html`      output clipboard as html, not text

VERSION="2024.02"

REMOTE_CP_HOST=localhost
REMOTE_COPY_PORT=2224
REMOTE_PASTE_PORT=2225

cb::basename() {
    [ -z "${1}" ] && return 1 || _basename__name="${1%%/}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
    /* | */*) _basename__name="$(expr "${_basename__name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s\\n" "${_basename__name}" | cut -c"$((${#_basename__name} - ${#_basename__suffix} + 1))"-"${#_basename__name}")" \
            = X"$(printf "%s\\n" "${_basename__suffix}")" ]; then
            _basename__name="$(printf "%s\\n" "${_basename__name}" | cut -c1-"$((${#_basename__name} - ${#_basename__suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename__name}"
}

cb::die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    # doc::help_msg "$0" >&2;
}

cb::show_version() {
    printf "%s\\n" "${PROGNAME} ${VERSION}"
}

cb::expose() {
    trap 'kill 0' EXIT
    mkfifo /tmp/nc_call_pid_pipe
    while true; do
        # on connection, output is the exposed system's clipboard
        {
            content=$(cb::paste)
            echo -e ">>>local-to-remote\n$content\n>>>"
            echo $content | nc -l $REMOTE_PASTE_PORT &
            nc_call_pid=$!
            echo $nc_call_pid > /tmp/nc_call_pid_pipe
            wait $nc_call_pid 
        } &

        # on connection, input is added to exposed system's clipboard
        {
            content=$(nc -l $REMOTE_COPY_PORT)

            echo $content | cb::copy

            echo -e "<<<remote-to-local\n$content\n<<<"
            read nc_call_pid < /tmp/nc_call_pid_pipe
            if [[ -n "$nc_call_pid" ]]; then
                kill $nc_call_pid >/dev/null 2>&1
            fi 
        } &


        wait
    done
}

cb::copy() {
    local copy_command

    if [ -n "${remote}" ]; then
        copy_command=("nc" "$REMOTE_CP_HOST" "$REMOTE_COPY_PORT")
    elif command -v "xclip" >/dev/null 2>/dev/null; then
        copy_command=("xclip" "-selection" "clipboard" "-i")
    elif command -v "xsel" >/dev/null 2>/dev/null; then
        copy_command=("xsel" "--clipboard")
    elif command -v "pbcopy" >/dev/null 2>/dev/null; then
        copy_command=("pbcopy")
    elif [ -e /dev/clipboard ]; then
        copy_command=("cat" "/dev/clipboard")
    else
        cb::die "${PROGNAME}: unrecognized clipboard system"
    fi

    { [ -n "${append}" ] && cb::paste; cat; } | "${copy_command[@]}"

    if [ $? -ne 0 ]; then
        if [ -n "${remote}" ]; then
            cb::die "${PROGNAME}: remote clipboard at ${REMOTE_COPY_PORT} not available for copy"
        else
            cb::die "${PROGNAME}: local clipboard not available for copy"
        fi
    fi

    # We sleep as remote listener needs to flush out the old clipboard
    if [ -n "${remote}" ]; then
        sleep .1
    fi
}

cb::target() {
    # Check if target is not set
    if [ -z "${target}" ]; then
        # Do nothing
        echo "TEXT"
    elif command -v "xclip" >/dev/null 2>/dev/null; then
        xclip -selection clipboard -out -target TARGETS | grep -i "${target:-text}" | head -n 1
    else
        cb::die "${PROGNAME}: clipboard target not supported"
    fi

}

cb::paste() {
    local paste_command

    if [ -n "${remote}" ]; then
        paste_command=("nc" "$REMOTE_CP_HOST" "$REMOTE_PASTE_PORT")
    elif command -v "xclip" >/dev/null 2>/dev/null; then
        paste_command=("xclip" "-selection" "clipboard" "-out" "-target" "$(cb::target)")
    elif command -v "xsel" >/dev/null 2>/dev/null; then
        paste_command=("xsel" "--clipboard")
    elif command -v "pbpaste" >/dev/null 2>/dev/null; then
        if [ -z "${target}" ]; then
            paste_command=("pbpaste")
        elif [ "${target}" = "html" ]; then
            paste_command=("pbpaste.swift")
        fi
    elif [ -e /dev/clipboard ]; then
        paste_command=("cat" "/dev/clipboard")
    else
        cb::die "${PROGNAME}: unrecognized clipboard system"
    fi

    "${paste_command[@]}"

    if [ $? -ne 0 ]; then
        if [ -n "${remote}" ]; then
            cb::die "${PROGNAME}: remote clipboard at ${REMOTE_PASTE_PORT} not available for paste"
        else
            cb::die "${PROGNAME}: local clipboard not available for paste"
        fi
    fi
}

cb::stdin_is_pipe() {
    [[ -p /dev/stdin ]]
}

cb::stdin_is_tty() {
    [[ -t 0 ]]
}

cb::stdout_is_tty() {
    [[ -t 1 ]]
}

cb::stdin_is_pipe_like() {
    cb::stdin_is_pipe || ! cb::stdin_is_tty
}

cb::main() {
    PROGNAME="$(cb::basename "${0}")"

    for arg in "${@}"; do #parse options
        case "${arg}" in
        -v | --version)
            cb::show_version
            return
            ;;
        -a | --append)
            append="1"
            shift
            ;;
        -t | --target)
            target="${2}"
            shift 2
            ;;
        -r | --remote)
            remote="1"
            shift
            ;;
        -e | --expose)
            cb::expose
            return
            ;;
        -*) cb::die "${PROGNAME}" "${PROGNAME}: unrecognized option '${arg}'" ;;
        esac
    done

    if cb::stdin_is_pipe_like; then
        cb::copy
        cb::paste
    else
        cb::paste
    fi
}

. "$DOTFILES/scripts/core/main.sh"

doc::maybe_help "$@"
[[ $? == 1 ]] && exit

cb::main "$@"
