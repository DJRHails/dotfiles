#!/usr/bin/env bash

# credit: https://gist.github.com/RichardBronosky/56d8f614fab2bacdd8b048fb58d0c0c7
# credit: https://github.com/javier-lopez/learn/master/sh/tools/cb

##? Unifies the copy and paste commands into one 
##? intelligent chainable command.
##?
##? USAGE:
##?     cb [FLAG/OPTIONS] <clipboard>...
##?
##? FLAGS:
##?     -a, --append
##?         append to the given clipboard, do not overwrite.
##?     -i, --ignore-interrupts  
##?         ignore interrupt signals
##?     -v, --version
##?         display version
##?     -h, --help
##?         show this help
##?
##? ARGS:
##?     <clipboard>  the file to extract
##?
##? EXAMPLES:
##?     `date | cb`       copy current data to clipboard 
##?     `cb`              paste current clipboard to stdout
##?     `cb | tee d.log`  paste current clipboard to d.log and stdout.

VERSION="2017.07.06-21:25"

_basename() {
    [ -z "${1}" ] && return 1 || _basename__name="${1%%/}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="$(expr "${_basename__name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s\\n" "${_basename__name}" | cut -c"$((${#_basename__name} - ${#_basename__suffix} + 1))"-"${#_basename__name}")" \
           = X"$(printf "%s\\n" "${_basename__suffix}")" ]; then
            _basename__name="$(printf "%s\\n" "${_basename__name}" | cut -c1-"$((${#_basename__name} - ${#_basename__suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename__name}"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    doc::help_msg "$0" >&2;
}

_show_version() {
    printf "%s\\n" "${PROGNAME} ${VERSION}"
}

_cb_copy() {
    if command -v "xclip" >/dev/null 2>/dev/null; then
        #dumping xclip's stdout to the bitbucket works around xclip's
        #failure to properly daemonize: https://sourceforge.net/p/xclip/patches/9/
        if [ -n "${append}" ]; then
            (_cb_paste 2>/dev/null; cat) | xclip -selection clipboard -i >/dev/null 2>&1
        else
            cat | xclip -selection clipboard -i >/dev/null 2>&1
        fi
    elif command -v "xsel" >/dev/null 2>/dev/null; then
        if [ -n "${append}" ]; then
            (_cb_paste 2>/dev/null; cat) | xsel --clipboard
        else
            cat | xsel --clipboard
        fi
    elif command -v "pbcopy" >/dev/null 2>/dev/null; then
        if [ -n "${append}" ]; then
            (_cb_paste 2>/dev/null; cat) | pbcopy
        else
            cat | pbcopy
        fi
    elif [ -e /dev/clipboard ]; then
        if [ -n "${append}" ]; then
            (cat /dev/clipboard 2>/dev/null; cat) > /dev/clipboard
        else
            cat > /dev/clipboard
        fi
    else
        _die "${PROGNAME}: unrecognized clipboard system"
    fi
}

_cb_paste() {
    if command -v "xclip" >/dev/null 2>/dev/null; then
        xclip -selection clipboard -o
    elif command -v "xsel" >/dev/null 2>/dev/null; then
        xsel --clipboard
    elif command -v "pbpaste" >/dev/null 2>/dev/null; then
        pbpaste
    elif [ -e /dev/clipboard ]; then
        cat /dev/clipboard
    else
        _die "${PROGNAME}: unrecognized clipboard system"
    fi
}

_stdin_is_pipe(){
  [[ -p /dev/stdin ]]
}

_stdin_is_tty() {
  [[ -t 0 ]]
}

_stdout_is_tty() {
  [[ -t 1 ]]
}

_stdin_is_pipe_like(){
    _stdin_is_pipe || ! _stdin_is_tty
}

cb() {
  PROGNAME="$(_basename "${0}")"

  for arg in "${@}"; do #parse options
      case "${arg}" in
          -v|--version) _show_version; return ;;
          -a|--append) append="1"; shift ;;
          -i|--ignore-interrupts) ignore_interrumpts="1"; shift ;;
          -*) _die "${PROGNAME}: unrecognized option '${arg}'" ;;
      esac
  done

  if _stdin_is_pipe_like; then
      _cb_copy
      _cb_paste
  else
      _cb_paste
  fi
}

. "$DOTFILES/scripts/core/main.sh"

# Check if we need help
doc::maybe_help "$@"
cb "$@"
